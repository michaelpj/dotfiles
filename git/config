[user]
  name = Michael Peyton Jones
  email = me@michaelpj.com
[core]
  editor = vim
[diff]
  algorithm = histogram
  mnemonicPrefix = true
[merge]
  conflictstyle = diff3
[rerere]
  enabled = true
[push]
  default = simple
[status]
  short = true
  branch = true
  submoduleSummary = true
[alias]
  nb = checkout -b
  nbu = !"f() { git checkout -b $1 && git push -u origin $1; }; f"
  co = checkout
  ca = !"f() { git checkout $1 && git submodule update --init --recursive; }; f"
  sb = !"git ca $(git branch-by-date | tac | hs | cut -f2 -d' ')"
  cm = commit -m
  ci = commit -v
  b = branch -a
  s = status 
  su = submodule update --init --recursive
  lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' 
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg = !"git lg1"
  amend = commit --amend
  branch-purge = !"git branch --merged | grep -v 'master' | grep -v '*' | while read branch; do git del-lr $branch; done"
  del-lr = !"f() { git branch -d $1 && git push origin --delete $1; }; f"
  del-lrf = !"f() { git branch -D $1 && git push origin --delete $1; }; f"
  branch-by-date = for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)' 
  fix = !"f() { git commit --fixup=${1:-HEAD}; }; f"
  tidy = rebase --autosquash -i
  where-merged = !"bash -c 'f() {  git rev-list $0..HEAD --ancestry-path | grep -f <(git rev-list $0..HEAD --first-parent) | tail -1; }; f'"
  conflicts = diff --name-only --diff-filter=U
  rebase-onto = !"f() { git rebase --onto $1 $(git merge-base HEAD $1); }; f"
